   //N- Queen All ways problem solving( this is one of the  important question of backtracking)
      //Question- place N- Queen in a NxN chess board that 2 Queen cant attckk eatch other

      //to see is placing queen safe from attack of other queen +

      public static boolean isSafe(char board [][] , int row, int col ) {
        // vertical up

        for(int i = row-1; i >= 0; i--){
          if ( board [i][col] == 'Q'){
            return false;
          }
        }
        //diagonal left top

        for (int i = row - 1 ,j = col -1;  i>= 0 && j>= 0; i--,j--){
          if (board[i][j] == 'Q'){
            return false;
          }
        }

        // diagonal right top

        for(int i = row -1, j = col + 1 ; i >= 0 && j < board.length; i--, j++){
          if ( board[i][j] == 'Q'){
            return false;
          }
        }
        return true;
      }

      // recursion and backtracking functions

      public static void nQueens(char board[][] , int row){
        // base case
        if ( row == board.length){
          printBoard(board);
          count++;
          return;
        }

        // colum loop 

        for ( int j = 0; j< board.length; j++){
          if( isSafe(board, row, j)){
            board[row][j] = 'Q';
            nQueens(board, row+1); // function reCalling
            board[row][j] = 'x'; // backtracking 
          }
        }
      }
         static  int count = 0;
      public static void printBoard(char board[][]){
        System.out.println("---------chess Board---------");
        for(int i = 0; i< board.length; i++){
          for(int j = 0; j< board.length; j++){
            System.out.print(board[i][j] + " ");
          }
          System.out.println();
        }
     
      }
